import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import networkx as nx
import numpy as np


def plot_ultraclear_pipeline():
    # Setup figure with constrained layout
    fig, ax = plt.subplots(figsize=(16, 6), dpi=300)
    ax.set_xlim(0, 16)
    ax.set_ylim(0, 6)
    ax.axis('off')

    # Title with subtitle
    plt.suptitle("CellTalkDB Data Processing Pipeline", y=0.95, fontsize=18,
                 fontweight='bold', color='#0d47a1')
    plt.title("From raw download to processed CSV", y=1.05, fontsize=12, color='#555555')

    # Define nodes with clear spacing
    nodes = [
        {"id": "start", "label": "Start", "pos": (1, 3), "color": "#757575"},
        {"id": "download", "label": "Download", "pos": (4, 3), "color": "#1976d2",
         "details": ["• HTTP request to CellTalkDB",
                     "• Stream data connection",
                     "• Initialize empty list"]},
        {"id": "chunk", "label": "Process Chunks", "pos": (8, 3), "color": "#388e3c",
         "details": ["• Read 1000 rows at a time",
                     "• Convert to flat list",
                     "• Accumulate in memory"]},
        {"id": "structure", "label": "Structure Data", "pos": (12, 3), "color": "#ffa000",
         "details": ["• Create 10-column layout",
                     "• Add column names",
                     "• Convert to DataFrame"]},
        {"id": "save", "label": "Save Output", "pos": (15, 3), "color": "#d32f2f",
         "details": ["• Export as CSV",
                     "• Return status message"]}
    ]

    # Draw nodes as clean rectangles
    for node in nodes:
        # Main node
        ax.add_patch(plt.Rectangle((node["pos"][0] - 1.5, node["pos"][1] - 0.8),
                                   3, 1.6, color=node["color"], alpha=0.9,
                                   ec='white', lw=1, zorder=3))
        ax.text(*node["pos"], node["label"], ha='center', va='center',
                color='white', fontweight='bold', fontsize=11, zorder=4)

        # Details box (only for processing nodes)
        if "details" in node:
            detail_y = node["pos"][1] - 2.2
            ax.add_patch(plt.Rectangle((node["pos"][0] - 1.8, detail_y),
                                       3.6, 1.8, color='white', alpha=0.95,
                                       ec='#eeeeee', lw=1, zorder=2))

            for i, detail in enumerate(node["details"]):
                ax.text(node["pos"][0], detail_y + 1.5 - i * 0.5, detail,
                        ha='center', va='center', fontsize=9, color='#333333')

    # Draw connecting arrows with clean style
    for i in range(len(nodes) - 1):
        ax.annotate("", xy=nodes[i + 1]["pos"], xytext=(nodes[i]["pos"][0] + 1.5, nodes[i]["pos"][1]),
                    arrowprops=dict(arrowstyle="->", color='#555555',
                                    lw=2, shrinkA=15, shrinkB=15))

    # Add process phase labels
    phase_colors = ['#1976d2', '#388e3c', '#ffa000', '#d32f2f']
    phases = ["Data Acquisition", "Chunk Processing", "Data Structuring", "Output"]
    for i, (phase, color) in enumerate(zip(phases, phase_colors)):
        ax.add_patch(plt.Rectangle((3.5 + i * 3.7, 5), 3.5, 0.6, color=color, alpha=0.2))
        ax.text(5.25 + i * 3.7, 5.3, phase, ha='center', va='center',
                color=color, fontweight='bold', fontsize=10)

    # Add legend
    legend_elements = [
        plt.Line2D([0], [0], marker='o', color='w', label='Data Flow',
                   markerfacecolor='#555555', markersize=10),
        plt.Line2D([0], [0], marker='s', color='w', label='Processing Step',
                   markerfacecolor='#1976d2', markersize=10),
        plt.Line2D([0], [0], marker='s', color='w', label='Technical Details',
                   markerfacecolor='white', markeredgecolor='#eeeeee', markersize=10)
    ]
    ax.legend(handles=legend_elements, loc='lower center',
              bbox_to_anchor=(0.5, -0.15), ncol=3, frameon=False)

    plt.tight_layout()
    plt.savefig('UltraClear_CellTalk_Pipeline.png', bbox_inches='tight', dpi=300)
    plt.show()


plot_ultraclear_pipeline()




def plot_advanced_pipeline():
    # Create figure
    fig, ax = plt.subplots(figsize=(16, 9))
    ax.set_xlim(0, 13)
    ax.set_ylim(0, 8)
    ax.axis('off')

    # Title
    plt.title('CellTalkDB Data Processing Pipeline',
              fontsize=24, pad=30, fontweight='bold', color='#1a1a1a')

    # Define nodes
    nodes = [
        {'id': 'start', 'label': 'Start', 'pos': (1, 4), 'color': '#7B7B7B', 'shape': 'circle'},
        {'id': 'download', 'label': 'Data Download', 'pos': (3.5, 4), 'color': '#1976D2', 'shape': 'rect',
         'details': ["Access CellTalkDB URL", "Secure connection", "Initialize container"]},
        {'id': 'process', 'label': 'Chunk Processing', 'pos': (6, 4), 'color': '#F9A825', 'shape': 'rect',
         'details': ["Read chunks (1000 rows)", "Convert to list", "Flatten structure"]},
        {'id': 'transform', 'label': 'Data Transformation', 'pos': (8.5, 4), 'color': '#43A047', 'shape': 'rect',
         'details': ["Restructure columns", "Add headers", "Create DataFrame"]},
        {'id': 'save', 'label': 'Save Results', 'pos': (11, 4), 'color': '#E53935', 'shape': 'rect',
         'details': ["Save as CSV", "Output confirmation", "Return status"]}
    ]

    # Edges
    edges = [('start', 'download'), ('download', 'process'), ('process', 'transform'), ('transform', 'save')]

    # Add nodes
    for node in nodes:
        x, y = node['pos']
        if node['shape'] == 'circle':
            ax.add_patch(plt.Circle((x, y), 0.4, color=node['color'], zorder=2))
            ax.text(x, y, node['label'], ha='center', va='center', color='white',
                    fontweight='bold', fontsize=12, zorder=3)
        else:
            ax.add_patch(plt.Rectangle((x - 1, y - 0.6), 2, 1.2, color=node['color'], ec='black', lw=2, zorder=2))
            ax.text(x, y, node['label'], ha='center', va='center', color='white',
                    fontweight='bold', fontsize=13, zorder=3)
            # Add details
            for i, detail in enumerate(node['details']):
                ax.text(x, y - 1 - (i * 0.4), f"• {detail}", ha='center', va='top', fontsize=10,
                        color='#333333', zorder=3)

    # Draw arrows
    for start, end in edges:
        start_pos = next(n['pos'] for n in nodes if n['id'] == start)
        end_pos = next(n['pos'] for n in nodes if n['id'] == end)

        if start == 'start':
            # Straight arrow from start
            ax.annotate("", xy=end_pos, xytext=start_pos,
                        arrowprops=dict(arrowstyle="->", lw=2.5, color='#444444',
                                        shrinkA=15, shrinkB=15), zorder=1)
        else:
            # Curved arrows
            arrow = patches.FancyArrowPatch(
                start_pos, end_pos,
                arrowstyle="->", color='#444444', lw=2.5,
                connectionstyle="arc3,rad=0.2", mutation_scale=20, zorder=1
            )
            ax.add_patch(arrow)

    # Decorative subtitle
    ax.text(6.5, 7.3, "Automated Data Processing Workflow", ha='center', va='center',
            fontsize=16, fontweight='bold', color='#555555',
            bbox=dict(facecolor='#f0f0f0', edgecolor='none', boxstyle='round,pad=0.5'))

    # Legend
    legend_elements = [
        patches.Patch(facecolor='#1976D2', edgecolor='black', label='Data Acquisition'),
        patches.Patch(facecolor='#F9A825', edgecolor='black', label='Data Processing'),
        patches.Patch(facecolor='#43A047', edgecolor='black', label='Data Transformation'),
        patches.Patch(facecolor='#E53935', edgecolor='black', label='Output Generation')
    ]
    ax.legend(handles=legend_elements, loc='lower center', bbox_to_anchor=(0.5, -0.1),
              ncol=4, frameon=False, fontsize=11)

    # Footer
    plt.figtext(0.5, 0.01, "CellTalkDB Pipeline | Visualization by Python & Matplotlib",
                ha='center', fontsize=10, color='#888888')

    plt.tight_layout()
    plt.savefig('Enhanced_CellTalk_Pipeline.png', dpi=300, bbox_inches='tight', transparent=False)
    plt.show()


# Generate the improved pipeline plot
plot_advanced_pipeline()


def draw_advanced_pipeline():
    """
    Draw an advanced visual representation of the AnimalTF data processing pipeline.
    """
    fig, ax = plt.subplots(figsize=(16, 9))
    ax.set_xlim(0, 14)
    ax.set_ylim(0, 8)
    ax.axis('off')

    # Title
    plt.title('AnimalTF Data Processing Pipeline', fontsize=24, fontweight='bold', color='#1a1a1a', pad=20)

    # --- Step 1: Download Data ---
    ax.add_patch(plt.Rectangle((1, 5.5), 4, 1.5, color='#4FC3F7', ec='black', lw=2, zorder=2))
    ax.text(3, 6.2, "Download AnimalTF Data", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(3, 5.8, "Use urllib + pandas chunksize", ha='center', va='center', fontsize=10, color='white')

    # --- Step 2: Process Data ---
    ax.add_patch(plt.Rectangle((6, 5.5), 4, 1.5, color='#81C784', ec='black', lw=2, zorder=2))
    ax.text(8, 6.2, "Process AnimalTF Data", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(8, 5.8, "Flatten lists, reformat, clean", ha='center', va='center', fontsize=10, color='white')

    # --- Step 3: Save Data ---
    ax.add_patch(plt.Rectangle((11, 5.5), 2.5, 1.5, color='#FF8A65', ec='black', lw=2, zorder=2))
    ax.text(12.25, 6.2, "Save Data", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(12.25, 5.8, "to CSV (AnimalTFData.csv)", ha='center', va='center', fontsize=10, color='white')

    # --- Connect steps with arrows ---
    ax.annotate("", xy=(6, 6.25), xytext=(5, 6.25),
                arrowprops=dict(arrowstyle="->", lw=2.5, color='black'))
    ax.annotate("", xy=(11, 6.25), xytext=(10, 6.25),
                arrowprops=dict(arrowstyle="->", lw=2.5, color='black'))

    # --- Step 4: Column Info ---
    ax.add_patch(plt.Rectangle((1, 1.5), 12, 3, color='#FFD54F', ec='black', lw=2, zorder=1, alpha=0.9))
    ax.text(7, 4.2, "Generated Data Columns", ha='center', va='center', fontsize=16, fontweight='bold', color='#424242')

    column_list = [
        "- Species", "- Symbol", "- Ensembl", "- Family", "- Protein", "- Entrez_ID"
    ]

    for idx, col in enumerate(column_list):
        x_pos = 2 + (idx % 3) * 4  # 3 columns layout
        y_pos = 3.5 - (idx // 3) * 1.0
        ax.text(x_pos, y_pos, col, ha='left', va='center', fontsize=13, color='#212121')

    # Decorative subtitle
    ax.text(7, 7.5, "Automated download ➔ formatting ➔ saving process", ha='center', va='center',
            fontsize=16, fontweight='medium', color='#616161')

    # Footer
    plt.figtext(0.5, 0.02, "Pipeline Visualization - AnimalTF Database | Powered by Python & Matplotlib",
                ha='center', fontsize=10, color='#888888')

    plt.tight_layout()
    plt.savefig('AnimalTF_Pipeline_Advanced.png', dpi=300, bbox_inches='tight', transparent=False)
    plt.show()

# Call the function
if __name__ == "__main__":
    draw_advanced_pipeline()



def draw_pathway_commons_pipeline():
    """
    Draw an advanced visual representation of the PathwayCommons data processing pipeline.
    """
    fig, ax = plt.subplots(figsize=(16, 9))
    ax.set_xlim(0, 14)
    ax.set_ylim(0, 8)
    ax.axis('off')

    # Title
    plt.title('PathwayCommons Data Processing Pipeline', fontsize=24, fontweight='bold', color='#1a1a1a', pad=20)

    # --- Step 1: Download Compressed Data ---
    ax.add_patch(plt.Rectangle((1, 5.5), 4, 1.5, color='#4FC3F7', ec='black', lw=2, zorder=2))
    ax.text(3, 6.2, "Download PathwayCommons Data", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(3, 5.8, "GZIP format from PC website", ha='center', va='center', fontsize=10, color='white')

    # --- Step 2: Extract and Filter ---
    ax.add_patch(plt.Rectangle((6, 5.5), 4, 1.5, color='#81C784', ec='black', lw=2, zorder=2))
    ax.text(8, 6.2, "Extract & Filter Interactions", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(8, 5.8, "Select specific INTERACTION_TYPEs", ha='center', va='center', fontsize=10, color='white')

    # --- Step 3: Process DataFrame ---
    ax.add_patch(plt.Rectangle((11, 5.5), 2.5, 1.5, color='#FF8A65', ec='black', lw=2, zorder=2))
    ax.text(12.25, 6.2, "Process and Save", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(12.25, 5.8, "Save CSV (PathwayCommons.csv)", ha='center', va='center', fontsize=10, color='white')

    # --- Connect steps with arrows ---
    ax.annotate("", xy=(6, 6.25), xytext=(5, 6.25),
                arrowprops=dict(arrowstyle="->", lw=2.5, color='black'))
    ax.annotate("", xy=(11, 6.25), xytext=(10, 6.25),
                arrowprops=dict(arrowstyle="->", lw=2.5, color='black'))

    # --- Step 4: Column Info ---
    ax.add_patch(plt.Rectangle((1, 1.5), 12, 3, color='#FFD54F', ec='black', lw=2, zorder=1, alpha=0.9))
    ax.text(7, 4.2, "Generated Data Columns", ha='center', va='center', fontsize=16, fontweight='bold', color='#424242')

    column_list = [
        "- PARTICIPANT_A", "- INTERACTION_TYPE", "- PARTICIPANT_B",
        "- INTERACTION_DATA_SOURCE", "- INTERACTION_PUBMED_ID", "- PATHWAY_NAMES"
    ]

    for idx, col in enumerate(column_list):
        x_pos = 2 + (idx % 3) * 4  # 3 columns layout
        y_pos = 3.5 - (idx // 3) * 1.0
        ax.text(x_pos, y_pos, col, ha='left', va='center', fontsize=13, color='#212121')

    # Decorative subtitle
    ax.text(7, 7.5, "Automated download ➔ extraction ➔ filtering ➔ saving process", ha='center', va='center',
            fontsize=16, fontweight='medium', color='#616161')

    # Footer
    plt.figtext(0.5, 0.02, "Pipeline Visualization - PathwayCommons Database | Powered by Python & Matplotlib",
                ha='center', fontsize=10, color='#888888')

    plt.tight_layout()
    plt.savefig('PathwayCommons_Pipeline_Advanced.png', dpi=300, bbox_inches='tight', transparent=False)
    plt.show()

# Call the function
if __name__ == "__main__":
    draw_pathway_commons_pipeline()


def draw_tcga_ov_wgs_pipeline():
    """
    Draw a visual representation of the TCGA-OV WGS BAM download pipeline from GDC API.
    """
    fig, ax = plt.subplots(figsize=(18, 10))
    ax.set_xlim(0, 16)
    ax.set_ylim(0, 10)
    ax.axis('off')

    # Title
    plt.title('TCGA-OV WGS BAM File Download Pipeline', fontsize=24, fontweight='bold', color='#1a1a1a', pad=20)

    # --- Step 1: Define Query ---
    ax.add_patch(plt.Rectangle((1, 7.5), 5, 1.5, color='#4FC3F7', ec='black', lw=2, zorder=2))
    ax.text(3.5, 8.2, "Define GDC API Query", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(3.5, 7.8, "TCGA-OV, WGS, BAM", ha='center', va='center', fontsize=10, color='white')

    # --- Step 2: Send Request ---
    ax.add_patch(plt.Rectangle((7, 7.5), 5, 1.5, color='#81C784', ec='black', lw=2, zorder=2))
    ax.text(9.5, 8.2, "POST Request to GDC", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(9.5, 7.8, "Receive TSV metadata", ha='center', va='center', fontsize=10, color='white')

    # --- Step 3: Parse Data ---
    ax.add_patch(plt.Rectangle((1, 5), 5, 1.5, color='#FFB74D', ec='black', lw=2, zorder=2))
    ax.text(3.5, 5.7, "Parse into DataFrame", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(3.5, 5.3, "file_id, file_name, size, etc.", ha='center', va='center', fontsize=10, color='white')

    # --- Step 4: Filter Data ---
    ax.add_patch(plt.Rectangle((7, 5), 5, 1.5, color='#BA68C8', ec='black', lw=2, zorder=2))
    ax.text(9.5, 5.7, "Filter: Aligned Reads", ha='center', va='center', fontsize=14, color='white', fontweight='bold')
    ax.text(9.5, 5.3, "Keep only BAM files", ha='center', va='center', fontsize=10, color='white')

    # --- Step 5: Download BAM Files ---
    ax.add_patch(plt.Rectangle((4, 2), 8, 2, color='#E57373', ec='black', lw=2, zorder=2))
    ax.text(8, 3.2, "Download BAM Files", ha='center', va='center', fontsize=16, color='white', fontweight='bold')
    ax.text(8, 2.7, "Loop through file_ids, download .bam individually", ha='center', va='center', fontsize=12, color='white')

    # --- Connect steps with arrows ---
    ax.annotate("", xy=(6, 8.25), xytext=(5, 8.25), arrowprops=dict(arrowstyle="->", lw=2.5, color='black'))
    ax.annotate("", xy=(6, 5.75), xytext=(5, 5.75), arrowprops=dict(arrowstyle="->", lw=2.5, color='black'))
    ax.annotate("", xy=(12, 5.75), xytext=(12, 8.25), arrowprops=dict(arrowstyle="-|>", lw=2.5, color='black'))
    ax.annotate("", xy=(9.5, 5), xytext=(9.5, 4.2), arrowprops=dict(arrowstyle="->", lw=2.5, color='black'))

    # Decorative subtitle
    ax.text(8, 9.3, "Automated retrieval ➔ processing ➔ filtering ➔ downloading pipeline", ha='center', va='center',
            fontsize=16, fontweight='medium', color='#616161')

    # Footer
    plt.figtext(0.5, 0.02, "Pipeline Visualization - GDC API BAM Download | Powered by Python & Matplotlib",
                ha='center', fontsize=10, color='#888888')

    plt.tight_layout()
    plt.savefig('TCGA_OV_WGS_Pipeline.png', dpi=300, bbox_inches='tight', transparent=False)
    plt.show()

# Run the plot function
if __name__ == "__main__":
    draw_tcga_ov_wgs_pipeline()
